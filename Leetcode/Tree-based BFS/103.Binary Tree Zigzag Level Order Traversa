class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        if(root==null){
            return result;
        }
        Deque<TreeNode> deque=new LinkedList<>();
        deque.offer(root);
        boolean reverselevel=false;
        while(!deque.isEmpty()){
            List<Integer> level=new ArrayList<>();
            int size=deque.size();
            for(int i=0;i<size;i++){
                TreeNode tempnode=deque.poll();
                level.add(tempnode.val); 
                if(tempnode.left!=null){
                    deque.offer(tempnode.left);
                }
                if(tempnode.right!=null){
                    deque.offer(tempnode.right);
                }
            }
            if(reverselevel){
            //list前后颠倒次序用Collections.reverse(list)
                Collections.reverse(level);
            }
            result.add(level);
            reverselevel=!reverselevel;
        }
        return result;
        
    }
}
