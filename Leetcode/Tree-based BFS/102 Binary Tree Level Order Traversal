Method1
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        traverse(root,1,result);
        return result;
    }
    public static void traverse(TreeNode root,int level, List<List<Integer>> result){
        if(root==null){
            return;
        }
        if(level>result.size()){
            result.add(new ArrayList<>()); 
            
        }
        result.get(level-1).add(root.val);
        traverse(root.left,level+1,result);
        traverse(root.right,level+1,result);
    }
}


Method2
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //result is a list that are composed of list
        List<List<Integer>> result=new ArrayList<>();
        //test case: TreeNode is null,return [[]].
        if(root==null){
            return result;
        }
        //DEQUE:FIFO
        Deque<TreeNode> deque=new LinkedList<>();
        deque.offer(root);
        while(!deque.isEmpty()){
            int size=deque.size();
            //level store the value in the same depth
            List<Integer> level=new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr=deque.poll();
                level.add(curr.val);
                if(curr.left!=null){
                    deque.add(curr.left);
                }
                if(curr.right!=null){
                    deque.add(curr.right);
                }
            }
            result.add(level);
        }
        return result;
    }
}
