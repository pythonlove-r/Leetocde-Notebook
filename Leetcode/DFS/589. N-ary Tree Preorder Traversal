/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

//method1:stack
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> list=new ArrayList<>();
        if(root==null) return list;
        Stack<Node> stack=new Stack<>();
        stack.add(root);
        while(!stack.empty()){
            root=stack.pop();
            list.add(root.val);
            for(int i=root.children.size()-1;i>=0;i--){
                stack.add(root.children.get(i));
            }
        }
        return list;
    }
}
//method2:recursion
class Solution {
    //为什么把这句话放前面，放方法里面不对，可能是因为放里面每一个recursion都会生成一个新的list
    public List<Integer> list = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if(root==null) return list;
        list.add(root.val);
        for(Node children:root.children){
            preorder(children);
        }
        return list;
    }
}
